solved.ac

Rendering Pipeline
USAGE
CPUAccessFlag

shader가 붙은 과정 : hlsl(high-level shader language)를 통해 프로그래머가 코딩해서 돌아가는 과정 ^^
shader가 안붙은 과정 : GPU가 스스로 진행하는 과정 **

inputLayout -> IA에게 전달할 input(정보)의 형식을 적어놓은것


*IA(Input Assembler)* : 입력된 데이터를 모으는 과정, GPU가 CPU로부터 데이터를 가져오는 과정


^VS(Vertex Shader)^ : World Transform, View Transform, Projection Transform 
부모자식 상속시 (자식의 행렬 X 부모의 행렬)

------------------------------------------------------------------------------------------------------------------------


^HS(Hull Shader)^

*TS(Tesselation Stage)*

^DS(Domain Shader)^



^GS(Geometry Shader)^

---------------------------------------------------------------------------------------------------------------------------


*RS(Rasterizer State)* : 3D 정점을 2D픽셀로 변경, RS이전의 작업들은 3D에서 해야하는 작업, 이후의 작업들은 2D로 해도 상관없는 작업

^PS(Pixel Shader)^ : 색과 관련된 작업, 3D보다 2D에서의 작업이 더 유리함

*OM(Output Merger)* : DepthStrencil과정



WVP 렌더링 파이프라인 -> 상대적인 NDC좌표계를 절대적인 화면좌표계로 바꾸는 과정

NDC 좌표계
Normalized Device Coordinate
화면 가운데가 (0,0) 인 정규화된 좌표계 

PrimitiveTopology에서 list와 strip

list : 하나의 도형을 완성하면 그다음 정점으로 부터 새로운 도형을 그림 
strip : 쉬지않고 계속 정점마다 연결해서 그림


back face culling 최적화를 위해 뒷면(반시계방향으로 그린것)은 render되지 않는 기법

선형보간법


USAGE  종류
Default = 기본값(CPU는 읽기 쓰기 둘다 x, GPU는 읽기 쓰기 둘다)
Immutable(불변의) = GPU에서 읽기만 가능 CPU는 둘다 불가능
Dynamic = CPU가 쓸수 있지만(수정이 가능하다) 읽을 수 없다(데이터를 다시 가져와서 읽는 것을 못한다, data를 조회하여 원본을 그대로 사용하는것)
, GPU는 읽을수만 있다(수정이 불가능하다)
ex) constBuffer
Staging = GPU가 CPU에게 데이터전송을 가능하게 한다(CPU가 읽고 쓰고 둘다 가능)

// Roll : 앞을 기준으로 회전 / Yaw : 세로를 기준으로 회전 / Pitch : 가로를 기준으로 회전
    // DX 기준 z축                DX 기준 y축                 DX 기준 x축

quaternion : 오일러각의 두 축이 겹치는 문제를 해결하기위해 만들어진 각도

DC->DrawIndexed
// Rendering pipeLine 시작하는 지점 , 따라서 이 이후부터는 Rendering pipeLine의 순서에 맞춰 코드를 적어야함


// move = 얕은복사를 해주는 함수, copy = 깊은복사를 해주는 함수

얕은복사 = 주소값만 새로 만들어서 복사하고 객체는 원래 메모리가 할당된 저장된 공간에 그대로 있는 것
깊은복사 = 객체 자체를 새로운 저장공간에 메모리를 할당하여 복사하는 것  즉 객체가 2개가 된다

rotation값 + 에서 - 방향을 바라보며 시계방향


서식지정자

Specular   (정반사)

Diffuse     (난반사)

Ambient(주변반사)

template을 cpp에 정의하면 링커에서 오류가 발생함

samplerstate에서 Point면 픽셀단위로 네모모양으로, Linear면 뭉게져서 찰흙처럼 나옴

inctance
프레임을 올리기 위한 기법
draw call이 원래 각 객체의 mesh마다 call되지만 같은 메쉬를 가진 객체를 한번의 draw call로 그리는 기법